// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String
  username  String?
  avatar    String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  recipes    Recipe[]
  ratings    RecipeRating[]
  comments   RecipeComment[]
  tags       Tag[]
  recipeTags RecipeTag[]

  @@map("users")
}

model Recipe {
  id           String    @id @default(uuid())
  slug         String    @unique
  title        String
  summary      String?
  emoji        String?
  prepTime     Int?      @map("prep_time")
  cookTime     Int?      @map("cook_time")
  servings     Int?
  author       String    @default("Anonymous")
  ingredients  Json
  instructions Json
  isDefault    Boolean   @default(false) @map("is_default")
  isPublic     Boolean   @default(true) @map("is_public")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  // Author relation
  authorId String? @map("author_id")
  user     User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)

  // Relations
  ratings    RecipeRating[]
  comments   RecipeComment[]
  recipeTags RecipeTag[]

  @@map("recipes")
}

model RecipeRating {
  id        String    @id @default(uuid())
  rating    Int
  userIp    String    @map("user_ip")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  recipeId String @map("recipe_id")
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  authorId String? @map("author_id")
  user     User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)

  @@unique([recipeId, userIp])
  @@map("recipe_ratings")
}

model RecipeComment {
  id         String    @id @default(uuid())
  authorName String    @default("Anonymous") @map("author_name")
  comment    String
  userIp     String    @map("user_ip")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  // Relations
  recipeId String @map("recipe_id")
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  authorId String? @map("author_id")
  user     User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)

  @@map("recipe_comments")
}

model Tag {
  id          String    @id @default(uuid())
  name        String    @unique
  displayName String    @map("display_name")
  isDefault   Boolean   @default(false) @map("is_default")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Author relation
  authorId String? @map("author_id")
  user     User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)

  // Relations
  recipeTags RecipeTag[]

  @@map("tags")
}

model RecipeTag {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  recipeId String @map("recipe_id")
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  tagId String @map("tag_id")
  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  // Author relation
  authorId String? @map("author_id")
  user     User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)

  @@unique([recipeId, tagId])
  @@map("recipe_tags")
}
